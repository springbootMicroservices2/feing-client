server.port=8090
 #telling the server not to register himself in the service registry
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
eureka.server.waitTimeInMsWhenSyncEmpty=0

#spring.application.name	Unique name for a Eureka server service.
#eureka.client.serviceUrl.defaultZone	
#It consults with other Eureka servers to sync the service registry. As it is in standalone mode, I am giving the local server address.
#server.port	In which port the server will be bound.
#eureka.client.register-with-eureka	
#This determines if this server registers itself as a client; as I said earlier, the Eureka server is also acting as a client so that it can sync the registry. The value being false means it prevents itself from acting as a client.
#eureka.client.fetch-registry	
#Does not register itself in the service registry.


#If eureka.client.fetchRegistry is true, the client fetches the 
#Eureka server registry at startup and caches it locally. From then on, it only fetches the delta
# (this can be turned off by setting eureka.client.shouldDisableDelta to false, although that is a waste of bandwidth).
#  The registry fetch is an asynchronous task scheduled every 30s 
#(configurable by eureka.client.registryFetchIntervalSeconds). 

#If the operation fails, it backs off exponentially by a factor of 2 until a maximum delay of 
#eureka.client.registryFetchIntervalSeconds * eureka.client.cacheRefreshExecutorExponentialBackOffBound is reached.
# There is no limit to the number of retries for fetching the registry information.

